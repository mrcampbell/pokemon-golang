// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createPokemon = `-- name: CreatePokemon :one
insert into pokemon(id, species_id, "level")
values ($1, $2, $3)
returning id
`

type CreatePokemonParams struct {
	ID        uuid.UUID
	SpeciesID int32
	Level     int32
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createPokemon, arg.ID, arg.SpeciesID, arg.Level)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPokemonStats = `-- name: CreatePokemonStats :one
insert into pokemon_stats(pokemon_id, stats_id, stat_type)
values ($1, $2, $3)
returning pokemon_id, stats_id, stat_type
`

type CreatePokemonStatsParams struct {
	PokemonID uuid.UUID
	StatsID   uuid.UUID
	StatType  string
}

func (q *Queries) CreatePokemonStats(ctx context.Context, arg CreatePokemonStatsParams) (PokemonStat, error) {
	row := q.db.QueryRow(ctx, createPokemonStats, arg.PokemonID, arg.StatsID, arg.StatType)
	var i PokemonStat
	err := row.Scan(&i.PokemonID, &i.StatsID, &i.StatType)
	return i, err
}

const createStats = `-- name: CreateStats :one
/* 
with new_user as (
  insert into user_account(name, email)
  values ('arthur', 'some@where.com')
  returning user_id
)
insert into other_table (user_id, some_column)
select user_id, 'some value'
from new_user;
*/

insert into stats(id, hp, attack, defense, special_attack, special_defense, speed)
values ($1, $2, $3, $4, $5, $6, $7)
returning id
`

type CreateStatsParams struct {
	ID             uuid.UUID
	Hp             int32
	Attack         int32
	Defense        int32
	SpecialAttack  int32
	SpecialDefense int32
	Speed          int32
}

func (q *Queries) CreateStats(ctx context.Context, arg CreateStatsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createStats,
		arg.ID,
		arg.Hp,
		arg.Attack,
		arg.Defense,
		arg.SpecialAttack,
		arg.SpecialDefense,
		arg.Speed,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listPokemon = `-- name: ListPokemon :many



SELECT id, species_id, level FROM pokemon
`

// with iv_stat as (
//
//	insert into pokemon_stats(hp, attack, defense, special_attack, special_defense, speed)
//	values (0, 0, 0, 0, 0, 0)
//	returning id
//
// ), ev_stat as (
//
//	insert into pokemon_stats(hp, attack, defense, special_attack, special_defense, speed)
//	values (0, 0, 0, 0, 0, 0)
//	returning id
//
// ), stats_stat as (
//
//	insert into pokemon_stats(hp, attack, defense, special_attack, special_defense, speed)
//	values (0, 0, 0, 0, 0, 0)
//	returning id
//
// )
// insert into pokemon(species_id, "level", iv_key, ev_key, stats_key)
// values ($1, $2, (select id from iv_stat), (select id from ev_stat), (select id from stats_stat))
// returning *;
// INSERT INTO pokemon (
//
//	species_id, "level"
//
// ) VALUES (
//
//	$1, $2
//
// ) RETURNING *;
func (q *Queries) ListPokemon(ctx context.Context) ([]Pokemon, error) {
	rows, err := q.db.Query(ctx, listPokemon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(&i.ID, &i.SpeciesID, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pokemonByID = `-- name: PokemonByID :one
SELECT id, species_id, level FROM pokemon WHERE id = $1
`

func (q *Queries) PokemonByID(ctx context.Context, id uuid.UUID) (Pokemon, error) {
	row := q.db.QueryRow(ctx, pokemonByID, id)
	var i Pokemon
	err := row.Scan(&i.ID, &i.SpeciesID, &i.Level)
	return i, err
}
